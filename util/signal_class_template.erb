/**
 * Signal<%= arg_count %>: signals with <%= arg_count %> <%= arg_count == 1 ? 'argument' : 'arguments' %>
 */
template< <%= template_signature %> >
class Signal<%= arg_count %> : public SignalBase
{
public:
    typedef fastdelegate::FastDelegate<%= arg_count %>< <%= arg_type_list %> > Delegate;
    
    struct Connection
    {
        Delegate d;
        SignalObserver* pObserver;
    };
    
    typedef DoublyLinkedList<Connection> ConnectionList;
    
    enum { eAllocationSize = sizeof(typename ConnectionList::Node) };
    
private:
    typedef typename ConnectionList::iterator ConnectionIter;
    typedef typename ConnectionList::const_iterator ConnectionConstIter;
    
    ConnectionList m_oConnections;
    
public:
    Signal<%= arg_count %>() { SetAllocator( s_pCommonAllocator ); }
    Signal<%= arg_count %>( ScopedAllocator* pAllocator ) { SetAllocator( pAllocator ); }
    
    virtual ~Signal<%= arg_count %>()
    {
        JL_SIGNAL_LOG( "Destroying signal %p\n", this );
        DisconnectAll();
    }
    
    void SetAllocator( ScopedAllocator* pAllocator ) { m_oConnections.Init( pAllocator ); }    
    unsigned CountConnections() const { return m_oConnections.Count(); }
    
    // Connects non-instance functions.
    void Connect( void (*fpFunction)(<%= arg_type_list %>) )
    {
        JL_SIGNAL_DOUBLE_CONNECTED_FUNCTION_ASSERT( fpFunction );
        JL_SIGNAL_LOG( "Signal %p connection to non-instance function %p", this, BruteForceCast<void*>(fpFunction) );
        
        Connection c = { Delegate(fpFunction), NULL };
        const bool bAdded = m_oConnections.Add( c );
        JL_ASSERT( bAdded );
    }    
    
    // Connects instance methods. Class X should be equal to Y, or an ancestor type.
    template< class X, class Y >
    void Connect( Y* pObject, void (X::*fpMethod)(<%= arg_type_list %>) )
    {
        if ( ! pObject )
        {
            return;
        }
        
        JL_SIGNAL_DOUBLE_CONNECTED_INSTANCE_METHOD_ASSERT( pObject, fpMethod );
        SignalObserver* pObserver = static_cast<SignalObserver*>( pObject );
        JL_SIGNAL_LOG( "Signal %p connecting to Observer %p (object %p, method %p)\n", this, pObserver, pObject, BruteForceCast<void*>(fpMethod) );
        
        Connection c = { fastdelegate::MakeDelegate(pObject, fpMethod), pObserver };
        const bool bAdded = m_oConnections.Add( c );
        JL_ASSERT( bAdded );
        NotifyObserverConnect( pObserver );
    }
    
    // Connects const instance methods. Class X should be equal to Y, or an ancestor type.
    template< class X, class Y >
    void Connect( Y* pObject, void (X::*fpMethod)(<%= arg_type_list %>) const )
    {
        if ( ! pObject )
        {
            return;
        }
        
        JL_SIGNAL_DOUBLE_CONNECTED_INSTANCE_METHOD_ASSERT( pObject, fpMethod );
        SignalObserver* pObserver = static_cast<SignalObserver*>( pObject );
        JL_SIGNAL_LOG( "Signal %p connecting to Observer %p (object %p, method %p)\n", this, pObserver, pObject, BruteForceCast<void*>(fpMethod) );
        
        Connection c = { fastdelegate::MakeDelegate(pObject, fpMethod), pObserver };
        const bool bAdded = m_oConnections.Add( c );
        JL_ASSERT( bAdded );
        NotifyObserverConnect( pObserver );
    }
    
    // Returns true if the given observer and non-instance function are connected to this signal.
    bool IsConnected( void (*fpFunction)(<%= arg_type_list %>) ) const
    {
        return IsConnected( Delegate(fpFunction) );
    }    
    
    // Returns true if the given observer and instance method are connected to this signal.
    template< class X, class Y >
    bool IsConnected( Y* pObject, void (X::*fpMethod)(<%= arg_type_list %>) ) const
    {
        return IsConnected( Delegate(pObject, fpMethod) );
    }
    
    // Returns true if the given observer and const instance method are connected to this signal.
    template< class X, class Y >
    bool IsConnected( Y* pObject, void (X::*fpMethod)(<%= arg_type_list %>) const ) const
    {
        return IsConnected( Delegate(pObject, fpMethod) );
    }
    
    void Emit( <%= arg_signature %> ) const
    {
        for ( ConnectionConstIter i = m_oConnections.const_begin(); i.isValid(); ++i )
        {
            (*i).d( <%= arg_list %> );
        }
    }
    
    void operator()( <%= arg_signature %> ) const { Emit( <%= arg_list %> ); }
    
    // Disconnects a non-instance method.
    void Disconnect( void (*fpFunction)(<%= arg_type_list %>) )
    {
        Delegate test( fpFunction );
        
        JL_SIGNAL_LOG( "Signal %p removing connections to non-instance method %p\n", this, BruteForceCast<void*>(fpFunction) );
        for ( ConnectionIter i = m_oConnections.begin(); i.isValid(); )
        {
            if ( (*i).d == test )
            {
                JL_ASSERT( (*i).pObserver == NULL );
                JL_SIGNAL_LOG( "\tRemoving connection to non-instance method\n" );
                m_oConnections.Remove( i );
            }
            else
            {
                ++i;
            }
        }
    }    
    
    // Disconnects all connected instance methods from a single observer    
    void Disconnect( SignalObserver* pObserver )
    {
        if ( ! pObserver )
        {
            return;
        }
        
        JL_SIGNAL_LOG( "Signal %p removing connections to Observer %p\n", this, pObserver );
        for ( ConnectionIter i = m_oConnections.begin(); i.isValid(); )
        {
            if ( (*i).pObserver == pObserver )
            {
                JL_SIGNAL_LOG( "\tRemoving connection to observer\n" );
                
                m_oConnections.Remove( i );
                NotifyObserverDisconnect( pObserver );
            }
            else
            {
                ++i;
            }
        }
    }
    
    void DisconnectAll()
    {
        JL_SIGNAL_LOG( "Signal %p disconnecting all observers\n", this );
        
        for ( ConnectionIter i = m_oConnections.begin(); i.isValid(); ++i )
        {
            SignalObserver* pObserver = (*i).pObserver;
            if ( pObserver )
            {
                NotifyObserverDisconnect( pObserver );
            }
        }
        
        m_oConnections.Clear();
    }
    
private:
    bool IsConnected( const Delegate& d ) const
    {
        for ( ConnectionConstIter i = m_oConnections.const_begin(); i.isValid(); ++i )
        {
            if ( (*i).d == d )
            {
                return true;
            }
        }
        
        return false;        
    }    
    
    void OnObserverDisconnect( SignalObserver* pObserver )
    {
        JL_SIGNAL_LOG( "\tSignal %p received disconnect message from observer %p\n", this, pObserver );
        
        for ( ConnectionIter i = m_oConnections.begin(); i.isValid(); )
        {
            if ( (*i).pObserver == pObserver )
            {
                JL_SIGNAL_LOG( "\t\tRemoving connection to observer\n" );
                m_oConnections.Remove( i );
            }
            else
            {
                ++i;
            }
        }
    }
};

#ifdef FASTDELEGATE_ALLOW_FUNCTION_TYPE_SYNTAX

/**
 * Signal<[<%= arg_count %> <%= arg_count == 1 ? 'argument' : 'arguments' %>]>: wrapper class for Signal<%= arg_count %>
 * This wrapper template, in conjunction with the "Signal" macro, will allow you to ignore the argument count in the signal typename.
 */
template< typename TUnused<%= ', ' + template_signature if arg_count > 0 %> >
class Signal< TUnused(<%= arg_type_list %>) > : public Signal<%= arg_count %>< <%= arg_type_list %> >
{
public:
    typedef Signal<%= arg_count %>< <%= arg_type_list %> > TParent;
    Signal() {}
    Signal( ScopedAllocator* pNodeAllocator ) : TParent(pNodeAllocator) {}
    void operator=( const TParent& other ) { *static_cast<TParent*>(this) = other; }
};

#endif // defined( FASTDELEGATE_ALLOW_FUNCTION_TYPE_SYNTAX )